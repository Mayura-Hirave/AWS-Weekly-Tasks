AWSTemplateFormatVersion: 2010-09-09
Description: Template to create resources for 3rd Task.

Parameters:
  InputBucketName:
    Type: String
    Default: input-data-s3bucket
  OutputBucketName:
    Type: String
    Default: input-data-s3bucket
  BucketForAthena:
    Type: String
    Default: athena-query-results-buckett
  DynamodbTableName:
    Type: String
    Default: FileSpecification_To_Gluejob_Mapping
    
Resources:
  RoleForLambdaFunctions:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: The IAM Role which allows Lambda Function to read from dynamodb, run Athena queries, run Glue Job and Crawler, publish failure alert to sns topic.
      RoleName: RoleForWk3Lambda
      Policies:
        - PolicyName: PolicyForWk3Lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - 'dynamodb:Query'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'glue:ListJobs'
                  - 'glue:StartJobRun'
                  - 'glue:GetJobRun'
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'glue:ListCrawlers'
                  - 'glue:UpdateCrawler'
                  - 'glue:StartCrawler'
                  - 'glue:GetCrawler'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'glue:GetTables'
                  - 's3:GetBucketLocation'
                  - 'athena:StartQueryExecution'
                  - 'athena:GetQueryExecution'
                  - 's3:PutObject'
                  - 'glue:GetTable'
                  - 'glue:CreateTable'
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'sns:Publish'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: LambdaFuncToTriggerGlueJob
      Code:
        S3Bucket: all-python-scripts
        S3Key: week3/trigger-glue-job-lambda.zip
      Description: This Function is called whenever an object lands on s3, to run glue job based on file type & size.
      Handler: trigger-glue-job-lambda.lambda_handler
      Role: !GetAtt RoleForLambdaFunctions.Arn
      Runtime: python3.9
      Timeout: 300
      
  LambdaConfig:
    Type: 'AWS::Lambda::EventInvokeConfig'
    Properties:
      FunctionName: !Ref LambdaFunction
      MaximumRetryAttempts: 0
      Qualifier: $LATEST
      
  InputS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref InputBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt LambdaFunction.Arn
            
  AllowS3ToCallLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub 
        - 'arn:aws:s3:::${InputS3BucketName}'
        - InputS3BucketName: !Ref InputBucketName
        
  RoleForGlueJob:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: The IAM Role which has all permissions needed to run glue job
      RoleName: AWSGlueServiceRole-RoleToRunGlueJob
      Policies:
        - PolicyName: PolicyForGlueJob
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:/aws-glue/*'

  RoleForCrawler:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: The IAM Role which has all permissions needed to run glue crawler.
      RoleName: AWSGlueServiceRole-RoleToRunCrawler
      Policies:
        - PolicyName: PolicyForCrawler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 'glue:GetDatabase'
                  - 'glue:GetTable'
                  - 'glue:CreateTable'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:/aws-glue/*'  
  OutputS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: output-data-s3bucket
      
  GlueJobToProcessCSV:
    Type: 'AWS::Glue::Job'
    Properties:
      Command:
        Name: glueetl
        PythonVersion: 3
        ScriptLocation: 's3://all-python-scripts/week3/csv_to_parque_gluejob.py'
      Description: Glue Job To Process CSV Files
      GlueVersion: 2.0
      Name: GlueJobForCSVFiles
      Role: !GetAtt RoleForGlueJob.Arn
      Timeout: 2
      MaxRetries: 0
      
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: "Media_Type"
          AttributeType: "S"
        - AttributeName: "File_Size_Limit"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "Media_Type"
          KeyType: "HASH"
        - AttributeName: "File_Size_Limit"
          KeyType: "RANGE"
      TableName: !Ref DynamodbTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SNSTopicForGlueJobFailureEmail:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: GlueJobFailureEmailNotification
      Subscription:
        - Endpoint: mayurahirave594@gmail.com
          Protocol: email
          
  DatabaseForCrawler:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: db-for-crawler
        
  GlueCrawler:
    Type: 'AWS::Glue::Crawler'
    Properties:
      DatabaseName: !Ref DatabaseForCrawler
      Description: crawler for output-folder
      Name: myCrawler
      Role: !GetAtt RoleForCrawler.Arn
      Targets:
        S3Targets:
          - Path: !Sub 
              - 's3://${BucketName}/'
              - BucketName: !Ref OutputBucketName
              
  AthenaResultS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketForAthena
