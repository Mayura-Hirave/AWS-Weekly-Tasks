AWSTemplateFormatVersion: '2010-09-09'

Description: A template for event based trigger on S3 using Lmabda

Parameters:
  SourceBucketName:
    Type: String
    Default: primary-s3bucket1
   
  DestinationBucketName:
    Type: String
    Default: backup-s3buckett1
  
  ScriptBucketName:
    Type: String
    Default: all-python-scripts
    
  ScriptFileName:
    Type: String
    Default: lambda_function2.zip
    
  LambdaHandlerFile:
    Type: String
    Default: lambda_function2
    Description: Name of handler file without extension.
  
  LambdaHandlerFunction:
    Type: String
    Default: lambda_handler

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:     
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - lambda.amazonaws.com
          Action: 
          - sts:AssumeRole
      Description : The IAM Role created for week1 task.
      RoleName : Wk1LambdaExecutionRole
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  PolicyForS3GetPutObjAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Sub 
              - 'arn:aws:s3:::${BucketName}/*' 
              - BucketName: !Ref SourceBucketName
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Resource: !Sub 
              - 'arn:aws:s3:::${BucketName}/*' 
              - BucketName: !Ref DestinationBucketName
      PolicyName: S3GetPutObjAccessPolicy
      Roles: 
        - !Ref LambdaExecutionRole
           
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: s3trigger-lambda-function
      Code:
        S3Bucket: !Ref ScriptBucketName
        S3Key: !Ref ScriptFileName
      Description: This Function is called whenever an object lands in s3 bucket, to copy it to another bucket
      Handler: !Join [ ".", [ !Ref LambdaHandlerFile, !Ref LambdaHandlerFunction]]
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      
  PrimaryS3bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceBucketName
      NotificationConfiguration:
        LambdaConfigurations: 
        - Event: s3:ObjectCreated:*
          Function: !GetAtt LambdaFunction.Arn
          
  BackupS3bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DestinationBucketName
      
  AllowS3ToCallLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction  
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub 
        - 'arn:aws:s3:::${BucketName}'
        - BucketName: !Ref SourceBucketName
